syntax = "proto3";

package api;
option go_package = "github.com/rotationalio/api";

service Raft {
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesReply) {};
    rpc RequestVote(VoteRequest) returns (VoteReply) {};
}

// Invoked by leader to replicate log entries (section 5.3 of the Raft whitepaper); 
// also used as heartbeat (section 5.2 of the Raft whitepaper).
// 
// Receiver implementation:
// 1. Reply false if term < currentTerm (section §5.1 of the Raft whitepaper)
// 2. Reply false if log doesn’t contain an entry at prevLogIndex
//    whose term matches prevLogTerm (section §5.3 of the Raft whitepaper)
// 3. If an existing entry conflicts with a new one (same index
//    but different terms), delete the existing entry and all that
//    follow it (section §5.3 of the Raft whitepaper)
// 4. Append any new entries not already in the log
// 5. If leaderCommit > commitIndex, set commitIndex =
//    min(leaderCommit, index of last new entry)
message AppendEntriesRequest {
    // The leader’s term.
    int32 term = 1;

    // So follower can redirect clients.
    string leaderId = 2;

    // The index of log entry immediately preceding new ones.
    int32 prevLogIndex = 3;

    // The term of the prevLogIndex entry.
    int32 prevLogTerm = 4;

    // The log entries to store (empty for heartbeat; may send more than one for efficiency)
    repeated string entries = 5;

    // The leader’s commitIndex.
    int32 leaderCommit = 6;

    // For debugging/logging purposes.
    string error = 15;
}

message AppendEntriesReply {
    // The current term number, for the leader to update itself.
    int32 term = 1;

    // True if follower contained entry matching prevLogIndex and prevLogTerm.
    bool success = 2;

    // For debugging/logging purposes.
    string error = 15;
}

// Invoked by candidates to gather votes (§5.2).
// 
// Receiver implementation:
// 1. Reply false if term < currentTerm (§5.1).
// 2. If votedFor is null or candidateId, and candidate’s log is at
//    least as up-to-date as receiver’s log, grant vote (sections §5.2, §5.4 of the 
//    Raft whitepaper).
message VoteRequest {
    // The candidate's term.
    int32 term = 1;

    // The candidate requesting a vote.
    string candidateId = 2;

    // The index of candidate’s last log entry (section 5.4 of the Raft whitepaper).
    int32 lastLogIndex = 3;

    // The term number of candidate’s last log entry (section 5.4 of the Raft whitepaper).
    int32 lastLogTerm = 4;

    // For debugging/logging purposes.
    string error = 15;
}

message VoteReply {
    // The current term number, for candidate to update itself.
    int32 term = 1;

    // True means the candidate received the vote.
    bool voteGranted = 2;

    // For debugging/logging purposes.
    string error = 15;
}