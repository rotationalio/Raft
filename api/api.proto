syntax = "proto3";

package api;
option go_package = "github.com/rotationalio/api";

service Raft {
    rpc AppendEntries(stream AppendEntriesRequest) returns (AppendEntriesReply) {};
    rpc RequestVote(VoteRequest) returns (VoteReply) {};
}

message AppendEntriesRequest {
    // The leader’s term.
    int32 term = 1;

    // So follower can redirect clients.
    string leaderId = 2;

    // The index of log entry immediately preceding new ones.
    int32 prevLogIndex = 3;

    // The term of the prevLogIndex entry.
    int32 prevLogTerm = 4;

    // The log entries to store (empty for heartbeat; may send more than one for efficiency)
    repeated Entry entries = 5;

    // The leader’s commitIndex.
    int32 leaderCommit = 6;

    // For debugging/logging purposes.
    string error = 15;
}

message AppendEntriesReply {
    // The current term number, for the leader to update itself.
    int32 term = 1;

    // True if follower contained entry matching prevLogIndex and prevLogTerm.
    bool success = 2;

    // For debugging/logging purposes.
    string error = 15;
}

message VoteRequest {
    // The candidate's term.
    int32 term = 1;

    // The candidate requesting a vote.
    string candidateId = 2;

    // The index of candidate’s last log entry (section 5.4 of the Raft whitepaper).
    int32 lastLogIndex = 3;

    // The term number of candidate’s last log entry (section 5.4 of the Raft whitepaper).
    int32 lastLogTerm = 4;

    // For debugging/logging purposes.
    string error = 15;
}

message VoteReply {
    // The current term number, for candidate to update itself.
    int32 term = 1;

    // True means the candidate received the vote.
    bool voteGranted = 2;

    // For debugging/logging purposes.
    string error = 15;
}

message Entry {
    int32 Term = 1;
    string Value = 2;
}